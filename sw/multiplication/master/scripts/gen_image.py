#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# File              : gen_image.py
# License           : MIT license <Check LICENSE>
# Author            : Anderson Ignacio da Silva (aignacio) <anderson@aignacio.com>
# Date              : 15.12.2022
# Last Modified Date: 07.01.2023
# Description       : Script to generate a pseudo image for the MPSoC - @aignacio,
#                     We breakdown the image into XxY chunks. Considering that the
#                     first segment [0] will be processed by the master tile, we
#                     generate NoC packets starting from the second segment [byte 1024].
import random

image_size  = 7 # in KiB
histogram   = [0 for x in range(256)]

def main():
    h_file = open("pseudo_image.h", "w")
    h_file.write("#ifndef PSEUDO_IMAGE_H")
    h_file.write("\n#define PSEUDO_IMAGE_H")
    h_file.write("\n\n// [DO NOT EDIT THIS FILE] Autogenerated from scripts/gen_image.py")
    h_file.write("\n\n#include <stdint.h>")
    h_file.write("\n\n#define pseudoIMAGE_KIB_SIZE\t  "+str(image_size))
    h_file.write("\n#define pseudoIMAGE_BYTES_SIZE\t"+str(image_size*1024))
    h_file.write("\n\n__attribute__((section(\".image\"))) uint8_t ucgPseudoImage [pseudoIMAGE_BYTES_SIZE] = {")
    for pixel in range(0,image_size*1024):
        val = random.randint(0,255)
        histogram[val] += 1
        if (pixel%4 == 0):
            h_file.write("\n\t"+str(val)+", ")
        elif (pixel == ((image_size*1024)-1)):
            h_file.write(str(val))
        else:
            h_file.write(str(val)+", ")
    h_file.write("\n};")

    h_file.write("\n\nuint8_t ucgHistogramCheck [256] = {\n\t")
    for idx, i in enumerate(histogram):
        if idx == 255:
            h_file.write(str(i))
        else:
            h_file.write(str(i)+", ")

            if (((idx+1)%8) == 0):
                h_file.write("\n\t")

    h_file.write("\n};")
    h_file.write("\n\n#endif")
    h_file.close()

if __name__ == "__main__":
    main()
